package com.rankerz.screenbrightness.feature.profiles.ui.components

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Dialog
import com.rankerz.screenbrightness.core.domain.model.UserProfile

/**
 * A dialog for adding or editing a UserProfile.
 *
 * @param initialProfile The profile to edit, or null to add a new one.
 * @param onDismissRequest Lambda called when the dialog should be dismissed.
 * @param onSaveProfile Lambda called when the user confirms saving the profile.
 */
@Composable
fun ProfileEditDialog(
    initialProfile: UserProfile?, // Null for adding, non-null for editing
    onDismissRequest: () -> Unit,
    onSaveProfile: (UserProfile) -> Unit
) {
    var profileName by remember { mutableStateOf(initialProfile?.name ?: "") }
    var brightnessLevel by remember { mutableStateOf(initialProfile?.brightnessLevel ?: 0.5f) }
    var temperatureKelvin by remember { mutableStateOf(initialProfile?.colorTemperatureKelvin ?: 6500) }
    var nameError by remember { mutableStateOf<String?>(null) }

    Dialog(onDismissRequest = onDismissRequest) {
        Card {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = if (initialProfile == null) "Add New Profile" else "Edit Profile",
                    style = MaterialTheme.typography.headlineSmall
                )
                Spacer(modifier = Modifier.height(16.dp))

                // Profile Name Input
                OutlinedTextField(
                    value = profileName,
                    onValueChange = { profileName = it; nameError = null },
                    label = { Text("Profile Name") },
                    isError = nameError != null,
                    singleLine = true,
                    modifier = Modifier.fillMaxWidth()
                )
                nameError?.let {
                    Text(it, color = MaterialTheme.colorScheme.error, style = MaterialTheme.typography.bodySmall)
                }
                Spacer(modifier = Modifier.height(16.dp))

                // Brightness Slider
                Text("Brightness: ${"%.2f".format(brightnessLevel)}")
                Slider(
                    value = brightnessLevel,
                    onValueChange = { brightnessLevel = it },
                    valueRange = 0f..1f, // Assuming 0.0 to 1.0 range
                    modifier = Modifier.fillMaxWidth()
                )
                Spacer(modifier = Modifier.height(16.dp))

                // Temperature Slider
                Text("Temperature: ${temperatureKelvin} K")
                Slider(
                    value = temperatureKelvin.toFloat(),
                    onValueChange = { temperatureKelvin = it.toInt() },
                    valueRange = 1000f..10000f, // Example range
                    steps = 89, // (10000 - 1000) / 100 - 1
                    modifier = Modifier.fillMaxWidth()
                )
                Spacer(modifier = Modifier.height(24.dp))

                // Action Buttons
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.End
                ) {
                    TextButton(onClick = onDismissRequest) {
                        Text("Cancel")
                    }
                    Spacer(modifier = Modifier.width(8.dp))
                    Button(onClick = {
                        if (profileName.isBlank()) {
                            nameError = "Name cannot be empty"
                        } else {
                            val profileToSave = initialProfile?.copy( // If editing, copy existing ID
                                name = profileName,
                                brightnessLevel = brightnessLevel,
                                colorTemperatureKelvin = temperatureKelvin
                            ) ?: UserProfile( // If adding, create new (ID generated by default)
                                name = profileName,
                                brightnessLevel = brightnessLevel,
                                colorTemperatureKelvin = temperatureKelvin
                            )
                            onSaveProfile(profileToSave)
                        }
                    }) {
                        Text("Save")
                    }
                }
            }
        }
    }
}